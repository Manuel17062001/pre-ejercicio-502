name: Lambda Pipeline

on:
  push:
    branches:
      - A01028653

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.4.0
        with:
          node-version: "14.x"
      - name: Install dependencies
        run: npm install --prefix A01028653
      - name: Lint with ESLint
        run: npm run lint --prefix A01028653

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.4.0
        with:
          node-version: "14.x"
      - name: Install dependencies
        run: npm install --prefix A01028653
      - name: Run Jest test suite
        run: npm test --prefix A01028653

  package:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.4.0
        with:
          node-version: "14.x"
      - name: Change directories
        run: cd A01028653
      - name: Install dependencies
        run: npm install --production --ignore-scripts --prefer-offline
      - name: Archive production files
        run: zip -r ${{ github.sha }}.zip .
      - name: Save package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}.zip
          path: ./${{ github.sha }}.zip

  dockerize:
    needs: [package]
    runs-on: ubuntu-latest
    steps:
      - name: Read artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.sha }}.zip
          path: .
      - name: Unzip production files
        id: unzip-files
        run: |
          unzip ${{ github.sha }}.zip
      - name: Change directories
        run: cd A01028653
      - name: List
        id: ls
        run: |
          ls
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: ./A01028653
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy:
    needs: [dockerize]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2
      - name: Run Terraform
        id: tf-run
        env:
          TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_lambda_image_uri: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          AWS_REGION: us-east-1
        run: |
          cd A01028653
          echo "** Running Terraform Init**"
          terraform init

          echo "** Running Terraform Apply**"
          terraform apply -auto-approve

          echo "** Commit State **"
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add -A
          git commit -m "update tf state"
          git push origin A01028653
      - name: Deploy to AWS Lambda
        id: deploy-lambda
        uses: appleboy/lambda-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: ${{ github.sha }}
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-1
          function_name: pre-ejercicio-a01028653
          image_uri: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
