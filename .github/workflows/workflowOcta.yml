# ESLint is a tool for identifying and reporting on patterns
# found in ECMAScript/JavaScript code.
# More details at https://github.com/eslint/eslint
# and https://eslint.org

name: octaCI

on:
  push:
    branches: ["A01781042"]
  schedule:
    - cron: "35 17 * * 3"

jobs:
  build:
    runs-on:
      ubuntu-latest
      # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: ${{ github.workspace }}/A01781042
        run: npm install

      - name: Run Build
        working-directory: ${{ github.workspace }}/A01781042
        run: npm run build --if-present

  eslint:
    name: Run eslint scanning
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install ESLint
        working-directory: ${{ github.workspace }}/A01781042
        run: |
          npm install -g eslint
          npm init @eslint/config -- --config semistandard

      - name: Run ESLint
        run: npx eslint
        continue-on-error: true

  unit-testing:
    name: Run unit testing with vitest
    runs-on: ubuntu-latest
    needs: eslint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies

        run: npm install --prefix A01781042

      - name: Install vitest
        working-directory: ${{ github.workspace }}/A01781042
        run: |
          npm install -D vitest

      - name: Run vitest
        working-directory: ${{ github.workspace }}/A01781042
        run: npm run test
        continue-on-error: true

  # package:
  #   name: package
  #   needs: unit-testing
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Zip Lambda function code
  #       run: zip -r lambda.zip .
  #       working-directory: ${{ github.workspace }}/A01781042

  dockerize:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Build and tag image
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01781042
        with:
          context: ./A01781042
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_TAG }}.tar
      - name: Save image
        uses: actions/upload-artifact@v3
        env:
          IMAGE_TAG: A01781042
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp/${{ env.IMAGE_TAG }}.tar
  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Read artifact
        uses: actions/download-artifact@v3
        env:
          IMAGE_TAG: A01781042
        with:
          name: ${{ env.IMAGE_TAG }}
          path: /tmp
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Deploy image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01781042
        run: |
          docker load --input /tmp/$IMAGE_TAG.tar
          docker image ls -a
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy_lambda:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      #Using versioned actions
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1 #--> Setup the Credential for the AWS cli
        with:
          # Created the Secrets Under the Repo only with These Variables
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Run AWS CLI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: d0z3f1c0/demo-repository-ecr
          IMAGE_TAG: A01781042
        run: |
          aws lambda create-function --function-name=A01781042 --image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --role=arn:aws:iam::171483448440:role/ASK_CLI_ROLE
